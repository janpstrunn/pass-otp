#!/usr/bin/env bash

PASSRC=${PASSRC:-"$HOME/.passrc"}
PASS_STORE=${PASS_STORE:-"$HOME/.pass/"}

OTP_STORE="$PASS_STORE/otp/"
RECUVA_STORE="$PASS_STORE/recovery/"

if [ ! -d "$RECUVA_STORE" ]; then
  mkdir "$RECUVA_STORE"
fi

if ! command -v oathtool &>/dev/null; then
  echo "oathtool could not be found. Please install it."
  exit 1
fi

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
if [ ! -f "$SCRIPT_DIR/pass" ]; then
  echo "Error: Missing dependencies"
  echo "pass is not installed"
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u critical "Pass: Error" "Missing dependencies!" --expire-time=5000
  fi
  exit 1
else
  source "$SCRIPT_DIR/pass"
fi

function usage_otp() {
  cat <<EOF
  ---------------------------------------------------
  ---------------------pass-otp----------------------
  ---------------------------------------------------
  -------------A modern CLI OTP manager--------------
  ---------------------------------------------------

Usage: pass-otp [options] <command> [arguments]

  -a [-s] <salt> [-i] <iteration>
                              Use Entropy Amplification
  -c                          Copy password to clipboard after password creation
  -d <zenity>                 Choose a dialog to get passwords
  -e                          Extra command run post clipboard cleareance
  -f                          Force. Bypass confirmation dialogs. May be destructive.
  -h, --help                  Display this help message and exit
  -l <parallels>              Define paralellism for Entropy Amplification
  -i <iteration>              Define iterations for Entropy Amplification
  -n                          Enable notifications
  -p <pin>                    Antecipate PIN
  -s <salt>                   Define salt for Entropy Amplification
  -z                          Don't keep private key cached

Commands:
  add, new, gen, generate [-f -c] <pass-name> <OTP>
                           Generate a new OTP
  cp, copy, clip [-a] <pass-name>
                           Copy OTP to clipboard
  custom, custom-cmd <pass-cmd> <pin-cmd>
                           Specify a custom dialog to get master OTP and PIN
  edit <pass-name>         Edit OTP key using nano
  find <pass-name>         Search OTPs and display as a tree
  import                   Import OTPs from password store
  ls, list                 List all stored OTPs in a tree format
  out, output, stdout [-a] <pass-name>
                           Print OTP to stdout
  recuva <pass-name>       Use nano to manage recovery keys
  rm, remove [-f] <pass-name>
                           Remove a OTP entry
  rm-recuva                Remove Recovery Key
  version                  Display the current version number

Examples:
  pass-otp new -c MyService ABCDEFGHIJKLMNOP
  pass-otp clip MyService
  pass-otp list
EOF
}

function otp_version() {
  echo "v.2.3.0"
}

function otp_import() {
  local PASSWORD_STORE_DIR
  local password_name password_dir password
  handle_required_files "$PASS_PUBKEY"
  handle_required_dir "$PASS_STORE"

  if [ "$FORCE" = "true" ]; then
    PASSWORD_STORE_DIR="$HOME/.password-store/"
  else
    PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store/}
  fi

  cd "$PASSWORD_STORE_DIR" || exit 11

  find . -type f -name "*.gpg" | while IFS= read -r password_file; do
    password_name=$(sed 's|^.\(.*\).gpg$|\1|' <<<"$password_file")
    password_dir=$(sed 's|^./\(.*\)/[^/]*\.gpg$|\1/|' <<<"$password_file")
    password=$(gpg --decrypt "$password_file" 2>/dev/null | tail -n 1 | awk -F'secret=' '
    { if (NF > 1) { split($2, a, "&"); print a[1] } else { exit 1 } }')

    if [ $? -ne 0 ]; then
      text "$RED" "Error: $password_name does not have a OTP secret key!" >&2
      continue
    fi

    if [ "$(awk -F '/' '{print $1}' <<<"$password_dir")" != "." ]; then
      mkdir -p "$OTP_STORE/$password_dir" || handle_error 11 "Failed to make $password_dir directory"
    fi

    echo "$password" | age --encrypt --recipient="$(cat "$PASS_PUBKEY")" -o "$OTP_STORE/$password_name.age"
    val=$?

    if [ $val -ne 0 ]; then
      text "$RED" "Error encrypting OTP: $password_name" >&2
      continue
    fi

    text "$GREEN" "OTP Key $password_name encrypted successfully!"
  done

  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Imported OTP from passwordstore"

  text "$GREEN" "All OTP Keys have been imported!"

  find "$PASS_STORE" -type f -exec chmod 600 {} \;
}

function output_otp() {
  local STORE
  STORE=${1:-"$OTP_STORE"}
  PASSWORD="$STORE/$name.age"
  handle_required_dir "$STORE"
  handle_required_files "$PASSWORD"

  get_age_key

  key=$(get_age_pass_expect)
  if [[ "$(basename "$0")" =~ pass-otp$ ]]; then
    age --decrypt --identity <(echo "$key") "$PASSWORD" | oathtool --totp --base32 -
  fi
}

function generate_otp() {
  local PASSWORD

  FORCE="${FORCE:-false}"
  PASSWORD="$OTP_STORE/$name.age"

  if [ ! -d "$OTP_STORE" ]; then
    mkdir "$OTP_STORE"
  fi

  if [ -z "$otp_key" ]; then
    handle_error 17 "Missing OTP Key!"
  fi

  if [ -f "$PASSWORD" ]; then
    text "$BLUE" "This password already exists!"
    if [ "$FORCE" = "true" ]; then
      srm "$PASSWORD"
      text "$RED" "Overwritting $name"
    else
      exit 1
    fi
  fi

  key=$(cat "$PASS_PUBKEY")

  cd "$PASSWORD_STORE" || exit 1
  mkdir -p "$(dirname "$name")"

  echo "$otp_key" | age --encrypt --recipient="$key" --output="$PASSWORD"
  val=$?
  [[ "$val" -ne 0 ]] && {
    if [ -f "$PASSWORD" ]; then
      srm "$PASSWORD"
    fi
    handle_error 18 "Failed to generate password!"
  }

  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Add generated OTP for $name"
  chmod 600 "$PASSWORD"
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Add" "Added OTP $name" --expire-time=3500
  fi
  if [ "$CLIP_POST_ACTION" = "true" ]; then
    copy_otp
  fi
}

function edit_otp() {
  local tmp_file PASSWORD PASS_OPERATION STORE
  STORE=$1
  PASS_OPERATION="$2"
  PASSWORD="$STORE/$name.age"
  tmp_file="$STORE/$name.tmp"
  decrypted_file=$(mktemp --tmpdir="/run/user/$(id -u)/" tmp_pass.XXXXXX)

  get_age_key

  if [ "$PASS_OPERATION" == "recovery key" ]; then
    touch "$PASSWORD"
  fi

  if [ ! -f "$tmp_file" ]; then
    mv "$PASSWORD" "$tmp_file" # safeguard original password
  fi

  key=$(get_age_pass_expect)
  age --decrypt --identity <(echo "$key") "$tmp_file" >"$decrypted_file"
  edit_error "Failed to decrypt private key!"

  nano "$decrypted_file"
  edit_error "Failed to edit file!"

  age --encrypt --recipient="$(cat "$PASS_PUBKEY")" -o "$PASSWORD" "$decrypted_file"
  edit_error "Failed to encrypt password!"

  srm "$tmp_file" "$decrypted_file"

  git -C "$PASS_STORE" add . &&
    git -C "$PASS_STORE" commit -m "Edit $PASS_OPERATION $name"
  chmod 600 "$PASSWORD"

  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Edit" "Edited $PASS_OPERATION $name" --expire-time=3500
  fi
  if [ "$CLIP_POST_ACTION" = "true" ]; then
    copy_otp
  fi
}

function edit_error() {
  local message
  message=$1
  val=$?
  if [ "$val" -ne 0 ]; then
    mv "$tmp_file" "$PASSWORD"
    srm "$decrypted_file"
    handle_error 18 "$message"
  fi
}

function copy_otp() {
  copy_password "$OTP_STORE"
  clip_otp
}

function clip_otp() {
  local PASSWORD
  PASSWORD="$OTP_STORE/$name.age"
  key=$(get_age_pass_expect)
  password=$(age --decrypt --identity <(echo "$key") "$PASSWORD")
  val=$?
  if [ "$val" -ne 0 ]; then
    handle_error 17 "Failed to copy OTP!"
  fi

  echo "$password" | oathtool --totp --base32 - | $clip_command
  echo "Clearing the password from clipboard in $CLIPBOARD_CLEAR_TIME seconds..."

  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Copy" "Clearing the OTP in $CLIPBOARD_CLEAR_TIME seconds..." --expire-time=3500
  fi
  sleep "$CLIPBOARD_CLEAR_TIME"s
  clear_clipboard || handle_error 16 "Failed to clear clipboard!"
  if [ -n "$POST_CLIPBOARD_CLEAR" ]; then
    sh -c "$POST_CLIPBOARD_CLEAR" || handle_error 16 "Failed to run post clipboard clear!"
  fi
}

function get_otp_args() {
  while getopts ":hnafvezc:d:p:i:s:" opt; do
    case "$opt" in
    a)
      ENTROPY_AMPLIFICATION=true
      ;;
    n)
      NOTIFY=true
      ;;
    i)
      ENTROPY_ITERATION="$OPTARG"
      ;;
    e)
      POST_CLIPBOARD_CLEAR=${1:-}
      ;;
    l)
      ENTROPY_PARALLELISM="$OPTARG"
      ;;
    s)
      ENTROPY_SALT="$OPTARG"
      ;;
    h)
      usage_otp
      exit 0
      ;;
    f) FORCE=true ;;
    d)
      DIALOG="$OPTARG"
      ;;
    p)
      pin="$OPTARG"
      ;;
    c)
      CLIP_POST_ACTION=true
      ;;
    v)
      version
      exit 0
      ;;
    z)
      KEEP_PASS=true
      ;;
    ?)
      text "$RED" "Error: Invalid option '-$OPTARG'" >&2
      exit 1
      ;;
    esac
  done

  shift $((OPTIND - 1))

  case "$1" in
  help | usage)
    usage_otp
    exit 0
    ;;
  cp | copy | clip)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    copy_otp
    exit 0
    ;;
  custom | custom-cmd)
    DIALOG="custom"
    shift
    CUSTOM_CMD_PASSWORD="$1"
    shift
    CUSTOM_CMD_PIN="$1"
    shift
    ;;
  add | new | generate)
    shift
    name="$1"
    if [[ -z "$name" ]]; then
      echo "Missing name"
    fi
    otp_key="$2"
    generate_otp
    exit 0
    ;;
  edit)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    edit_otp "$OTP_STORE" OTP
    exit 0
    ;;
  output | out | stdout)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    output_otp
    exit 0
    ;;
  ls | list)
    list_passwords "$OTP_STORE"
    exit 0
    ;;
  rm | remove)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    remove_password "$OTP_STORE" OTP
    exit 0
    ;;
  rm-recuva)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$RECUVA_STORE"
    fi
    remove_password "$RECUVA_STORE" "recovery key"
    exit 0
    ;;
  find)
    shift
    name=$1
    find_passwords "$OTP_STORE"
    exit 0
    ;;
  recuva)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$RECUVA_STORE"
    fi
    edit_otp "$RECUVA_STORE" "recovery key"
    exit 0
    ;;
  version)
    version
    exit 0
    ;;
  import)
    otp_import
    exit 0
    ;;
  "")
    list_passwords "$OTP_STORE"
    exit 0
    ;;
  *)
    text "$RED" "Error: Invalid command $1" >&2
    usage_otp
    exit 0
    ;;
  esac
}

if [[ "$(basename "$0")" =~ pass-otp$ ]]; then
  get_otp_args "$@"
fi
